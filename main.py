from aiogram import Bot, Dispatcher, executor, types
from config import API_TOKEN, admins
import keyboard as kb
import functions as func
import sqlite3
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import Throttled
from random import randint
import os, glob
from aiogram.utils.markdown import link


storage = MemoryStorage()
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)
connection = sqlite3.connect('data.db')
q = connection.cursor()

class st(StatesGroup):
	item = State()
	item2 = State()
	item3 = State()
	item4 = State()


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
	func.join(chat_id=message.chat.id)
	q.execute(f"SELECT block FROM users WHERE user_id = {message.chat.id}")
	result = q.fetchone()
	ID = message.chat.id
	if result[0] == 0:
		if ID in admins:
			await message.answer(f'–ü—Ä–∏–≤—ñ—Ç, –∞–¥–º—ñ–Ω {ID}.', reply_markup=kb.menu)
		else:
			await message.answer(f'–ü—Ä–∏–≤—ñ—Ç, {message.chat.first_name}.\n–¢–∏ –º–æ–∂–µ—à –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –º–µ–Ω—ñ –Ω–æ–≤–∏–Ω—É –∞–±–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, –∑–∞ –±–∞–∂–∞–Ω–Ω—è–º –ø—Ä–∏–∫—Ä—ñ–ø–∏–≤—à–∏ –≤—ñ–¥–µ–æ —Ç–∞ —Ñ–æ—Ç–æ.')
	else:
		await message.answer('–í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ!')


@dp.message_handler(content_types=['text'], text='–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ üõ†')
async def handfler(message: types.Message, state: FSMContext):
	func.join(chat_id=message.chat.id)
	q.execute(f"SELECT block FROM users WHERE user_id = {message.chat.id}")
	result = q.fetchone()
	if result[0] == 0:
		if message.chat.id in admins:
			await message.answer('–í–∏ –≤—ñ–¥–∫—Ä–∏–ª–∏ –ø–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=kb.adm)

@dp.message_handler(content_types=['text'], text='–ù–∞–∑–∞–¥ ‚óÄÔ∏è')
async def handledr(message: types.Message, state: FSMContext):
	await message.answer('–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –Ω–∞–∑–∞–¥', reply_markup=kb.menu)


@dp.message_handler(content_types=['text'], text='–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ üìñ')
async def admi(message: types.Message, state: FSMContext):
	func.join(chat_id=message.chat.id)
	q.execute(f"SELECT block FROM users WHERE user_id = {message.chat.id}")
	result = q.fetchone()
	ID = message.chat.id
	if result[0] == 0:
		if ID in admins:
			await message.answer(f'–°–ø–∏—Å–æ–∫ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤:')
			for i in admins:
				await message.answer(f'<a href="tg://user?id={i}">{i}</a>', parse_mode="HTML")



@dp.message_handler(content_types=['text'], text='–ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ üìã')
async def handlaer(message: types.Message, state: FSMContext):
	func.join(chat_id=message.chat.id)
	q.execute(f"SELECT block FROM users WHERE user_id = {message.chat.id}")
	result = q.fetchone()
	if result[0] == 0:
		if message.chat.id in admins:
			q.execute(f"SELECT * FROM users WHERE block == 1")
			result = q.fetchall()
			sl = []
			for index in result:
				i = index[0]
				sl.append(i)

			ids = '\n'.join(map(str, sl))
			await message.answer(f'ID –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n{ids}')


@dp.message_handler(commands=['admins'])
async def adm(message: types.Message):
	func.join(chat_id=message.chat.id)
	q.execute(f"SELECT block FROM users WHERE user_id = {message.chat.id}")
	result = q.fetchone()
	ID = message.chat.id
	if result[0] == 0:
		if ID in admins:
			await message.answer(f'–°–ø–∏—Å–æ–∫ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤:')
			for i in admins:
				await message.answer(f'<a href="tg://user?id={i}">{i}</a>', parse_mode="HTML")





@dp.message_handler(content_types=['text'], text='–ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ üö´')
async def hanadler(message: types.Message, state: FSMContext):
	func.join(chat_id=message.chat.id)
	q.execute(f"SELECT block FROM users WHERE user_id = {message.chat.id}")
	result = q.fetchone()
	if result[0] == 0:
		if message.chat.id in admins:
			await message.answer('–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ —Ö–æ—á–µ—Ç–µ –∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏.', reply_markup=kb.back)
			await st.item3.set()


@dp.message_handler(content_types=['text'], text='–†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ ‚ùé')
async def hfandler(message: types.Message, state: FSMContext):
	func.join(chat_id=message.chat.id)
	q.execute(f"SELECT block FROM users WHERE user_id = {message.chat.id}")
	result = q.fetchone()
	if result[0] == 0:
		if message.chat.id in admins:
			await message.answer('–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ —Ö–æ—á–µ—Ç–µ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏.', reply_markup=kb.back)
			await st.item4.set()


@dp.message_handler(content_types=['text'], text='–†–æ–∑—Å–∏–ª–∫–∞ üì®')
async def hangdler(message: types.Message, state: FSMContext):
	func.join(chat_id=message.chat.id)
	q.execute(f"SELECT block FROM users WHERE user_id = {message.chat.id}")
	result = q.fetchone()
	if result[0] == 0:
		if message.chat.id in admins:
			await message.answer('–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç —Ä–æ–∑—Å–∏–ª–∫–∏:', reply_markup=kb.back)
			await st.item.set()

@dp.message_handler(content_types=['text'])
@dp.throttled(func.antiflood, rate=300)
async def h(message: types.Message, state: FSMContext):
	func.join(chat_id=message.chat.id)
	q.execute(f"SELECT block FROM users WHERE user_id = {message.chat.id}")
	result = q.fetchone()
	if result[0] == 0:
		if message.chat.id in admins:
			pass
		else:
			await message.answer('–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.')
			for i in admins:
				name = link(f'{message.from_user.first_name}', f'tg://user?id={message.chat.id}')
				await bot.send_message(i, f'*–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥:* {name}\nID: `{message.chat.id}`\n–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: _{message.text}_', reply_markup=kb.fun(message.chat.id), parse_mode='Markdown')
	else:
		await message.answer('–í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ!')



@dp.message_handler(content_types=["photo", "text"])
@dp.throttled(func.antiflood, rate=0)
async def photo(message: types.Message, state: FSMContext):
	func.join(chat_id=message.chat.id)
	q.execute(f"SELECT block FROM users WHERE user_id = {message.chat.id}")
	result = q.fetchone()
	id = message.chat.id
	text = message.caption
	name = randint(1, 1000000)
	if result[0] == 0:
		if message.chat.id in admins:
			pass
		else:
			await message.photo[-1].download(f'{id}/{name}.jpg')
			await message.answer('–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.')
			for i in admins:
				photo = open(f'{id}/{name}.jpg', 'rb')
				name = link(f'{message.from_user.first_name}', f'tg://user?id={message.chat.id}')
				await bot.send_photo(i, photo, caption=f'*–û—Ç—Ä–∏–º–∞–Ω–æ —Ñ–æ—Ç–æ –≤—ñ–¥:* {name}\nID: `{message.chat.id}`\n–¢–µ–∫—Å—Ç: {text}', reply_markup=kb.fun(message.chat.id), parse_mode='Markdown')
			for file in glob.glob(f"{id}/*"):
				os.remove(file)
	else:
		await message.answer('–í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ!')


@dp.message_handler(content_types=["video", "text"])
@dp.throttled(func.antiflood, rate=0)
async def video(message: types.Message, state: FSMContext):
	func.join(chat_id=message.chat.id)
	q.execute(f"SELECT block FROM users WHERE user_id = {message.chat.id}")
	result = q.fetchone()
	id = message.chat.id
	text = message.caption
	name = randint(1, 1000000)
	if result[0] == 0:
		if message.chat.id in admins:
			pass
		else:
			file_id = message.video.file_id  # Get file id
			file = await bot.get_file(file_id)  # Get file path
			await bot.download_file(file.file_path, f"{id}/{name}.mp4")
			await message.answer('–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.')
			for i in admins:
				video = open(f'{id}/{name}.mp4', 'rb')
				name = link(f'{message.from_user.first_name}', f'tg://user?id={message.chat.id}')
				await bot.send_video(i, video.read(), caption=f'*–û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–µ–æ –≤—ñ–¥:* {name}\nID: `{message.chat.id}`\n–¢–µ–∫—Å—Ç: {text}',reply_markup=kb.fun(message.chat.id), parse_mode='Markdown')

			for file in glob.glob(f"{id}/*"):
				os.remove(file)
	else:
		await message.answer('–í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ!')




@dp.callback_query_handler(lambda call: True) # Inline
async def cal(call, state: FSMContext):
	if 'ans' in call.data:
		a = call.data.index('-ans')
		ids = call.data[:a]
		await call.message.answer('–í–≤–µ–¥—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É:', reply_markup=kb.back)
		await st.item2.set()
		await state.update_data(uid=ids)
	elif 'ignor' in call.data:
		await call.answer('–í–∏–¥–∞–ª–µ–Ω–æ')
		await bot.delete_message(call.message.chat.id, call.message.message_id)
		await state.finish()
	elif 'ban' in call.data:
		a = call.data.index('-ban')
		ids = call.data[:a]


		q.execute(f"SELECT block FROM users WHERE user_id = {ids}")
		result = q.fetchall()
		connection.commit()
		if len(result) == 0:
			await call.message.answer('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.', reply_markup=kb.adm)
			await state.finish()
		else:
			a = result[0]
			id = a[0]

			if ids in map(str, admins):
				await bot.send_message(call.message.chat.id, '–¶–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä üòë')

			elif id == 0:
				q.execute(f"UPDATE users SET block = 1 WHERE user_id = {ids}")
				connection.commit()
				await call.message.answer('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.', reply_markup=kb.adm)
				await state.finish()

				for i in admins:
					await bot.send_message(i,
										   f'–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä <a href="tg://user?id={call.message.chat.id}">{call.message.chat.id}</a> –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <a href="tg://user?id={ids}">{ids}</a>',
										   parse_mode="HTML")

				await bot.send_message(ids, '–í–∞—Å –±—É–ª–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—î—é.')
			else:
				await call.message.answer('–¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π.', reply_markup=kb.adm)
				await state.finish()





@dp.message_handler(state=st.item2)
async def proc(message: types.Message, state: FSMContext):
	if message.text == '–°–∫–∞—Å—É–≤–∞–Ω–Ω—è':
		await message.answer('–°–∫–∞—Å—É–≤–∞–Ω–Ω—è! –ü–æ–≤–µ—Ä—Ç–∞—é—Å—å –Ω–∞–∑–∞–¥.', reply_markup=kb.menu)
		await state.finish()
	else:
		await message.answer('–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.', reply_markup=kb.menu)
		data = await state.get_data()
		id = data.get("uid")
		await state.finish()
		await bot.send_message(id, '<b>–í–∞–º –≤—ñ–¥–ø–æ–≤—ñ–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä!</b>\n\n<b>–í—ñ–¥–ø–æ–≤—ñ–¥—å:</b> {}'.format(message.text), parse_mode='HTML')
		for i in admins:
			await bot.send_message(i, f'–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä <a href="tg://user?id={message.chat.id}">{message.chat.id}</a> –Ω–∞–¥—ñ—Å–ª–∞–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É <a href="tg://user?id={id}">{id}</a>\n\n–í—ñ–¥–ø–æ–≤—ñ–¥—å: {message.text}',parse_mode="HTML")

@dp.message_handler(state=st.item)
async def process_name(message: types.Message, state: FSMContext):
	q.execute(f'SELECT user_id FROM users')
	row = q.fetchall()
	connection.commit()
	text = message.text
	if message.text == '–°–∫–∞—Å—É–≤–∞–Ω–Ω—è':
		await message.answer('–°–∫–∞—Å—É–≤–∞–Ω–Ω—è! –ü–æ–≤–µ—Ä—Ç–∞—é—Å—å –Ω–∞–∑–∞–¥.', reply_markup=kb.adm)
		await state.finish()
	else:
		info = row
		await message.answer('–ü–æ—á–∏–Ω–∞—é —Ä–æ–∑—Å–∏–ª–∫—É!', reply_markup=kb.adm)
		for i in admins:
			await bot.send_message(i,f'–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä <a href="tg://user?id={message.chat.id}">{message.chat.id}</a> –ø–æ—á–∏–Ω–∞—î —Ä–æ–∑—Å–∏–ª–∫—É! \n–¢–µ–∫—Å—Ç: {text}',parse_mode="HTML")

		for i in range(len(info)):
			try:
				await bot.send_message(info[i][0], str(text))
			except:
				pass
		await message.answer('–†–æ–∑—Å–∏–ª–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ.', reply_markup=kb.adm)
		await state.finish()


@dp.message_handler(state=st.item3)
async def proce(message: types.Message, state: FSMContext):

	if message.text == '–°–∫–∞—Å—É–≤–∞–Ω–Ω—è':
		await message.answer('–°–∫–∞—Å—É–≤–∞–Ω–Ω—è! –ü–æ–≤–µ—Ä—Ç–∞—é—Å—å –Ω–∞–∑–∞–¥.', reply_markup=kb.adm)
		await state.finish()
	else:
		if message.text.isdigit():
			q.execute(f"SELECT block FROM users WHERE user_id = {message.text}")
			result = q.fetchall()
			connection.commit()
			if len(result) == 0:
				await message.answer('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.', reply_markup=kb.adm)
				await state.finish()
			else:
				a = result[0]
				id = a[0]

				if message.text in map(str, admins):
					await bot.send_message(message.chat.id, '–¶–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä üòë')

				elif id == 0:
					q.execute(f"UPDATE users SET block = 1 WHERE user_id = {message.text}")
					connection.commit()
					await message.answer('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.', reply_markup=kb.adm)
					await state.finish()


					for i in admins:
						await bot.send_message(i,f'–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä <a href="tg://user?id={message.chat.id}">{message.chat.id}</a> –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <a href="tg://user?id={message.text}">{message.text}</a>',parse_mode="HTML")

					await bot.send_message(message.text, '–í–∞—Å –±—É–ª–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—î—é.')
				else:
					await message.answer('–¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π.', reply_markup=kb.adm)
					await state.finish()
		else:
			await message.answer('–í–≤–µ–¥—ñ—Ç—å ID!')

@dp.message_handler(state=st.item4)
async def proc(message: types.Message, state: FSMContext):
	if message.text == '–°–∫–∞—Å—É–≤–∞–Ω–Ω—è':
		await message.answer('–°–∫–∞—Å—É–≤–∞–Ω–Ω—è! –ü–æ–≤–µ—Ä—Ç–∞—é—Å—å –Ω–∞–∑–∞–¥.', reply_markup=kb.adm)
		await state.finish()
	else:
		if message.text.isdigit():
			q.execute(f"SELECT block FROM users WHERE user_id = {message.text}")
			result = q.fetchall()
			connection.commit()
			if len(result) == 0:
				await message.answer('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.', reply_markup=kb.adm)
				await state.finish()
			else:
				a = result[0]
				id = a[0]
				if id == 1:
					q.execute(f"UPDATE users SET block = 0 WHERE user_id = {message.text}")
					connection.commit()
					await message.answer('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ.', reply_markup=kb.adm)
					await state.finish()

					for i in admins:
						await bot.send_message(i,f'–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä <a href="tg://user?id={message.chat.id}">{message.chat.id}</a> —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <a href="tg://user?id={message.text}">{message.text}</a>',parse_mode="HTML")

					await bot.send_message(message.text, '–í–∞—Å –±—É–ª–æ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ –∞–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—î—é.')
				else:
					await message.answer('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π.', reply_markup=kb.adm)
					await state.finish()
		else:
			await message.answer('–í–≤–µ–¥—ñ—Ç—å ID!')

if __name__ == '__main__':
	executor.start_polling(dp, skip_updates=True)